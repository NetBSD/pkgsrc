4mARCHIVE_WRITE24m(3)		 Library Functions Manual	   4mARCHIVE_WRITE24m(3)

1mNAME0m
       archive_write — functions for creating archives

1mLIBRARY0m
       Streaming Archive Library (libarchive, -larchive)

1mSYNOPSIS0m
       1m#include <archive.h>0m

1mDESCRIPTION0m
       These  functions	 provide a complete API for creating streaming archive
       files.  The general process is to first create the struct  archive  ob‐
       ject,  set any desired options, initialize the archive, append entries,
       then close the archive and release all resources.

   1mCreate archive object0m
       See 4marchive_write_new24m(3).

       To write an archive,  you  must	first  obtain  an  initialized	struct
       archive object from 1marchive_write_new22m().

   1mEnable filters and formats, configure block size and padding0m
       See	4marchive_write_filter24m(3),	   4marchive_write_format24m(3)	     and
       4marchive_write_blocksize24m(3).

       You can then modify this object for the	desired	 operations  with  the
       various	1marchive_write_set_XXX22m()  functions.   In  particular, you will
       need    to    invoke    appropriate     1marchive_write_add_XXX22m()	and
       1marchive_write_set_XXX22m()  functions to enable the corresponding compres‐
       sion and format support.

   1mSet options0m
       See 4marchive_write_set_options24m(3).

   1mOpen archive0m
       See 4marchive_write_open24m(3).

       Once  you  have	prepared  the  struct	archive	  object,   you	  call
       1marchive_write_open22m()  to  actually	open the archive and prepare it for
       writing.	 There are several variants of this function; the  most	 basic
       expects	you  to provide pointers to several functions that can provide
       blocks of bytes from the archive.  There are convenience forms that al‐
       low you to specify a filename, file descriptor, 4mFILE24m  4m*24m  object,  or  a
       block of memory from which to write the archive data.

   1mProduce archive0m
       See 4marchive_write_header24m(3) and 4marchive_write_data24m(3).

       Individual  archive  entries  are  written in a three-step process: You
       first initialize a  struct  archive_entry  structure  with  information
       about  the new entry.  At a minimum, you should set the pathname of the
       entry and provide a 4mstruct24m 4mstat24m with a valid 4mst_mode24m field, which spec‐
       ifies the type of object and 4mst_size24m field, which specifies the size of
       the data portion of the object.

   1mRelease resources0m
       See 4marchive_write_free24m(3).

       After all entries have been written, use the 1marchive_write_free22m() func‐
       tion to release all resources.

1mEXAMPLES0m
       The following sketch illustrates basic usage of the library.   In  this
       example, the callback functions are simply wrappers around the standard
       4mopen24m(2), 4mwrite24m(2), and 4mclose24m(2) system calls.

	     #ifdef __linux__
	     #define _FILE_OFFSET_BITS 64
	     #endif
	     #include <sys/stat.h>
	     #include <archive.h>
	     #include <archive_entry.h>
	     #include <fcntl.h>
	     #include <stdlib.h>
	     #include <unistd.h>

	     struct mydata {
	       const char *name;
	       int fd;
	     };

	     int
	     myopen(struct archive *a, void *client_data)
	     {
	       struct mydata *mydata = client_data;

	       mydata->fd = open(mydata->name, O_WRONLY | O_CREAT, 0644);
	       if (mydata->fd >= 0)
		 return (ARCHIVE_OK);
	       else
		 return (ARCHIVE_FATAL);
	     }

	     la_ssize_t
	     mywrite(struct archive *a, void *client_data, const void *buff, size_t n)
	     {
	       struct mydata *mydata = client_data;

	       return (write(mydata->fd, buff, n));
	     }

	     int
	     myclose(struct archive *a, void *client_data)
	     {
	       struct mydata *mydata = client_data;

	       if (mydata->fd > 0)
		 close(mydata->fd);
	       return (0);
	     }

	     void
	     write_archive(const char *outname, const char **filename)
	     {
	       struct mydata *mydata = malloc(sizeof(struct mydata));
	       struct archive *a;
	       struct archive_entry *entry;
	       struct stat st;
	       char buff[8192];
	       int len;
	       int fd;

	       a = archive_write_new();
	       mydata->name = outname;
	       /* Set archive format and filter according to output file extension.
		* If it fails, set default format. Platform depended function.
		* See supported formats in archive_write_set_format_filter_by_ext.c */
	       if (archive_write_set_format_filter_by_ext(a, outname) != ARCHIVE_OK)  {
		 archive_write_add_filter_gzip(a);
		 archive_write_set_format_ustar(a);
	       }
	       archive_write_open(a, mydata, myopen, mywrite, myclose);
	       while (*filename) {
		 stat(*filename, &st);
		 entry = archive_entry_new();
		 archive_entry_copy_stat(entry, &st);
		 archive_entry_set_pathname(entry, *filename);
		 archive_write_header(a, entry);
		 if ((fd = open(*filename, O_RDONLY)) != -1) {
		   len = read(fd, buff, sizeof(buff));
		   while (len > 0) {
		     archive_write_data(a, buff, len);
		     len = read(fd, buff, sizeof(buff));
		   }
		   close(fd);
		 }
		 archive_entry_free(entry);
		 filename++;
	       }
	       archive_write_free(a);
	     }

	     int main(int argc, const char **argv)
	     {
	       const char *outname;
	       argv++;
	       outname = *argv++;
	       write_archive(outname, argv);
	       return 0;
	     }

1mSEE ALSO0m
       4mtar24m(1), 4marchive_write_set_options24m(3), 4mlibarchive24m(3), 4mcpio24m(5), 4mmtree24m(5),
       4mtar24m(5)

1mHISTORY0m
       The 1mlibarchive 22mlibrary first appeared in FreeBSD 5.3.

1mAUTHORS0m
       The 1mlibarchive 22mlibrary was written by Tim Kientzle <kientzle@acm.org>.

1mBUGS0m
       There  are  many peculiar bugs in historic tar implementations that may
       cause certain programs to reject archives written by this library.  For
       example, several historic implementations calculated  header  checksums
       incorrectly and will thus reject valid archives; GNU tar does not fully
       support	pax  interchange format; some old tar implementations required
       specific field terminations.

       The default pax interchange format eliminates most of the historic  tar
       limitations  and	 provides  a  generic key/value attribute facility for
       vendor-defined extensions.  One oversight in POSIX is  the  failure  to
       provide	a  standard  attribute for large device numbers.  This library
       uses “SCHILY.devminor” and “SCHILY.devmajor” for	 device	 numbers  that
       exceed  the  range  supported by the backwards-compatible ustar header.
       These keys are compatible with Joerg Schilling's 1mstar 22marchiver.   Other
       implementations may not recognize these keys and will thus be unable to
       correctly  restore device nodes with large device numbers from archives
       created by this library.

Debian			       February 2, 2012		      4mARCHIVE_WRITE24m(3)
