$NetBSD: patch-meson.build,v 1.6 2019/10/29 09:22:24 adam Exp $

- On Darwin, optionally use Cocoa (needed for X11 users).

- Don't insist that Python binary is called "python3".
  (Requires meson >= 0.50.0)

- Don't install bash completion scripts.

- Tolerate getxattr not existing (smartOS)
  https://gitlab.gnome.org/GNOME/glib/merge_requests/888

- Define a newer POSIX, as we build this package with -std=gnu99

- auto-detect GNU iconv, even if no arguments are passed.
  (by checking if iconv.h might in fact be a gnu one)

- Ignore __GCC_HAVE_SYNC_COMPARE_AND_SWAP_4 as is already done
  for android and linux. PR pkg/54298

--- meson.build.orig	2019-07-24 10:52:04.000000000 +0000
+++ meson.build
@@ -643,6 +643,7 @@ if host_system == 'darwin'
                                       #error "Detected GNUstep, not Cocoa"
                                       #endif''',
                                    name : 'Mac OS X Cocoa support')
+  glib_have_cocoa = glib_have_cocoa and get_option('use_cocoa')
 
   if glib_have_cocoa
     glib_conf.set('HAVE_COCOA', true)
@@ -1570,28 +1571,15 @@ atomictest = '''int main() {
 }
 '''
 
-atomicdefine = '''
-#ifndef __GCC_HAVE_SYNC_COMPARE_AND_SWAP_4
-#error "compiler has atomic ops, but doesn't define __GCC_HAVE_SYNC_COMPARE_AND_SWAP_4"
-#endif
-'''
-
 # We know that we can always use real ("lock free") atomic operations with MSVC
 if cc.get_id() == 'msvc' or cc.links(atomictest, name : 'atomic ops')
-  have_atomic_lock_free = true
-  if (host_system == 'android' or host_system == 'linux') and not cc.compiles(atomicdefine, name : 'atomic ops define')
-    # When building for armv5 on Linux, gcc provides
-    # __sync_bool_compare_and_swap but doesn't define
-    # __GCC_HAVE_SYNC_COMPARE_AND_SWAP_4
-    glib_conf.set('__GCC_HAVE_SYNC_COMPARE_AND_SWAP_4', true)
-  endif
+  glibconfig_conf.set('G_ATOMIC_LOCK_FREE', true)
 else
-  have_atomic_lock_free = false
   if host_machine.cpu_family() == 'x86' and cc.links(atomictest, args : '-march=i486')
     error('GLib must be built with -march=i486 or later.')
   endif
+  glibconfig_conf.set('G_ATOMIC_LOCK_FREE', false)
 endif
-glibconfig_conf.set('G_ATOMIC_LOCK_FREE', have_atomic_lock_free)
 
 # === Threads ===
 
@@ -1696,14 +1684,14 @@ else
   found_iconv = false
   if iconv_opt == 'libc'
     if cc.has_function('iconv_open')
-      libiconv = []
-      found_iconv = true
-    endif
-  elif iconv_opt == 'gnu'
-    if cc.has_header_symbol('iconv.h', 'libiconv_open')
-      glib_conf.set('USE_LIBICONV_GNU', true)
-      libiconv = [cc.find_library('iconv')]
-      found_iconv = true
+      if cc.has_header_symbol('iconv.h', 'libiconv_open')
+        glib_conf.set('USE_LIBICONV_GNU', true)
+	libiconv = [cc.find_library('iconv')]
+	found_iconv = true
+      else
+        libiconv = []
+        found_iconv = true
+      endif
     endif
   elif iconv_opt == 'native'
     if cc.has_header_symbol('iconv.h', 'iconv_open')
@@ -1785,7 +1773,7 @@ endif
 # proxy-libintl subproject.
 # FIXME: glib-gettext.m4 has much more checks to detect broken/uncompatible
 # implementations. This could be extended if issues are found in some platforms.
-if cc.has_function('ngettext')
+if cc.has_function('ngettext') and host_system != 'sunos'
   libintl = []
   have_bind_textdomain_codeset = cc.has_function('bind_textdomain_codeset')
 else
@@ -1836,16 +1824,15 @@ if host_system != 'windows' and get_opti
   if cc.has_function('getxattr') and cc.has_header('sys/xattr.h')
     glib_conf.set('HAVE_SYS_XATTR_H', 1)
     glib_conf_prefix = glib_conf_prefix + '#define @0@ 1\n'.format('HAVE_SYS_XATTR_H')
+    glib_conf.set('HAVE_XATTR', 1)
   #failure. try libattr
   elif cc.has_header_symbol('attr/xattr.h', 'getxattr')
     glib_conf.set('HAVE_ATTR_XATTR_H', 1)
     glib_conf_prefix = glib_conf_prefix + '#define @0@ 1\n'.format('HAVE_ATTR_XATTR_H')
     xattr_dep = [cc.find_library('xattr')]
-  else
-    error('No getxattr implementation found in C library or libxattr')
+    glib_conf.set('HAVE_XATTR', 1)
   endif
 
-  glib_conf.set('HAVE_XATTR', 1)
   if cc.compiles(glib_conf_prefix + '''
                  #include <stdio.h>
                  #ifdef HAVE_SYS_TYPES_H
@@ -1886,9 +1873,11 @@ elif meson.get_cross_property('have_strl
   glib_conf.set('HAVE_STRLCPY', 1)
 endif
 
-python = import('python').find_installation('python3')
-# used for '#!/usr/bin/env <name>'
-python_name = 'python3'
+python = import('python').find_installation('python3', required: false)
+if not python.found()
+  python = import('python').find_installation()
+endif
+python_name = python.path()
 
 python_version = python.language_version()
 python_version_req = '>=3.4'
@@ -1897,7 +1886,7 @@ if not python_version.version_compare(py
 endif
 
 # Determine which user environment-dependent files that we want to install
-have_bash = find_program('bash', required : false).found() # For completion scripts
+have_bash = false # For completion scripts
 have_sh = find_program('sh', required : false).found() # For glib-gettextize
 
 # Some installed tests require a custom environment
@@ -1906,7 +1895,7 @@ env_program = find_program('env', requir
 # FIXME: How to detect Solaris? https://github.com/mesonbuild/meson/issues/1578
 if host_system == 'sunos'
   glib_conf.set('_XOPEN_SOURCE_EXTENDED', 1)
-  glib_conf.set('_XOPEN_SOURCE', 2)
+  glib_conf.set('_POSIX_C_SOURCE',200809)
   glib_conf.set('__EXTENSIONS__',1)
 endif
 
